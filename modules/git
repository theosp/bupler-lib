#!/bin/bash

git.doc ()
{
    cat <<EOF
Bupler module for the git-scm
EOF
}

git.is_rep.doc ()
{
    cat <<EOF
git.is_rep(path=".")

Gets a path and returns 0 if it's under a git repository; 1 otherwise

If under git repository it prints the path to the .git dir to stdout

Stdout
------

path to the .git dir

Exit Status
-----------

0 - under git repository
1 - not under git repository
EOF
}
git.is_rep ()
{
    local path="${1:-.}"

    # First, get the path's absolute path
    cd "$path"
    path="$(pwd -P)/"
    cd - > /dev/null

    while [[ "$path" != '' ]]
    do
        if [[ -e "${path}.git" ]]
        then
            echo "${path}.git"
            return 0
        fi

        if [[ "$path" == '/' ]]
        then
            return 1
        else
            path="${path%/*/}/"
        fi
    done
}

git.current_branch.doc ()
{
    cat <<EOF
git.current_branch()

prints the current git branch

return 1 if not under a git repository, 2 if branch is detached or unknown

Stdout
------

current git branch

Exit Status
-----------

0 - branch found and isn't detached or unknown
1 - not under a git repository
2 - branch is detached or unknown
EOF
}
git.current_branch ()
{
    local dot_git_path branch

    if ! dot_git_path="$(git.is_rep)"
    then
        return 1
    fi

    # The following was forked from:
    # http://aaroncrane.co.uk/2009/03/git_branch_prompt/
    head=$(< "$dot_git_path/HEAD")
    if [[ $head == ref:\ refs/heads/* ]]; then
        branch="${head#*/*/}"
        echo "$branch"
        return 0
    elif [[ $head != '' ]]; then
        branch='detached'
        echo "$branch"
        return 2
    else
        branch='unknown'
        echo "$branch"
        return 2
    fi
}

git.status.doc ()
{
    cat <<EOF
git.status()

return a list of space-separated booleans that represent the current git
status

Meaning of each position:
0 untracked
1 updated in index
2 added to index
3 deleted from index
4 renamed in index
5 copied in index
6 work tree changed since index
7 deleted in work tree
8 unmerged, both deleted
9 unmerged, added by us
10 unmerged, deleted by them
11 unmerged, added by them
12 unmerged, deleted by us
13 unmerged, both added
14 unmerged, both modified
EOF
}
git.status ()
{
    local index="$(git status --porcelain 2> /dev/null)"

    local flags=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )

    while IFS= read -r line; do
        case "${line:0:1}"
        in
            # untracked
            "?")
                flags[0]=1
            ;;
            # updated in index
            "M")
                flags[1]=1
            ;;
            # added to index
            "A")
                flags[2]=1
            ;;
            # deleted from index
            "D")
                flags[3]=1
            ;;
            # renamed in index
            "R")
                flags[4]=1
            ;;
            # copied in index
            "D")
                flags[5]=1
            ;;
        esac
        case "${line:1:1}"
        in
            # work tree changed since index
            "M")
                flags[6]=1
            ;;
            # deleted in work tree
            "D")
                flags[7]=1
            ;;
        esac
        case "${line:0:2}"
        in
            # unmerged, both deleted
            "DD")
                flags[8]=1
            ;;
            # unmerged, added by us
            "AU")
                flags[9]=1
            ;;
            # unmerged, deleted by them
            "UD")
                flags[10]=1
            ;;
            # unmerged, added by them
            "UA")
                flags[11]=1
            ;;
            # unmerged, deleted by us
            "DU")
                flags[12]=1
            ;;
            # unmerged, both added
            "AA")
                flags[13]=1
            ;;
            # unmerged, both modified
            "UU")
                flags[14]=1
            ;;
        esac
    done <<< "$index"

    echo "${flags[@]}"

    return 0
}

# vim:ft=bash:
