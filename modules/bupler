#!/bin/bash

bupler.doc ()
{
    cat <<EOF
Bupler's basic module
EOF
}

bupler.script_pwd.doc ()
{
    cat <<EOF
bupler.script_pwd(physical=0)

Prints the full path of the directory of the script that calls it.

If physical set to 1 it prints the physical dir path.

Exit Status
-----------

Always 0
EOF
}
bupler.script_pwd ()
{
    # credit: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-in/179231#179231
    local physical=0
    if [[ -n "$1" ]] && (( $1 == 1 ))
    then
        physical=1
    fi

    local SCRIPT_PWD="${BASH_SOURCE[1]}"
    if [ -h "${SCRIPT_PWD}" ] 
    then
        while [ -h "${SCRIPT_PWD}" ]
        do
            SCRIPT_PWD=`readlink "${SCRIPT_PWD}"`
        done
    fi

    pushd . > /dev/null
    cd `dirname ${SCRIPT_PWD}` > /dev/null
    if (( $physical == 1 ))
    then
        # print physical path
        SCRIPT_PWD=`pwd -P`
    else
        SCRIPT_PWD=`pwd`
    fi
    popd > /dev/null

    echo -n $SCRIPT_PWD

    return 0
}

# bupler.core_modules_path should have been set as an attribute, but
# bupler.set_attr isn't available yet.
# It prints the output of bupler.script_pwd for this script.
# We declare this function with eval to be able to call bupler.script_pwd
# only once when defining it.
eval "$(cat <<EOF
    bupler.core_modules_path ()
    {
        echo -n "$(bupler.script_pwd 1)"
    }
EOF
)"

bupler.type.doc()
{
    cat <<EOF
bupler.type(name)

Prints the type of name.

Exit Status
-----------

Always 0
EOF
}
bupler.type ()
{
    name="$1"

    type_function="$name"'.__type__'

    # The following exit status is 0 if $type_function isn't set
    if declare -f "$type_function" &> /dev/null
    then
        eval $1'.__type__'
        return 0
    fi
    echo 'unknown yet (soon to be develop)'

    return 0
}

bupler.import.doc()
{
    cat <<EOF
bupler.import(module_name)

loads module_name.

modules as objects
------------------

For each module it imports bupler.import() calls::

    $ object.Object module_name

so modules can be considered to be objects.

Thus, you can, for example, do the following::

    $ bupler.import module_name
    $ module_name.set_attr attr value # set new attribute named 'attr' with
                                      # 'value' as its value.
    $ module_name.attr
    value

TODO
----

should return 1 if module_name doesn't exists.

Exit Status
-----------

Always 0
EOF
}
bupler.import ()
{
    module="$1"

    if [[ "$(bupler.type "$module")" != 'Module' ]]
    then
        . $BUPLER_LIB_PATH"${module//./\/}"

        object.Object "$module"
    fi
}

# import the object module, which is required by bupler.import()
bupler.import object
